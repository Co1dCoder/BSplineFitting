#pragma  once


/********************************************************************
created:	 2009/07/23
created:	 23:7:2009   19:17
file base:	 cubic_b_spline.h
author:		 Zheng Qian
contact:     qian.zheng@siat.ac.cn
affiliation: Shenzhen Institute of Advanced Technology

purpose:	 cubic B spline  


2009/07/23  23:7:2009  19:37  minor changes by Nan Liangliang
*********************************************************************/


#include "vector2.h"
#include <Eigen/Dense>
#include <vector>
#include <map>

using namespace std;
using namespace Eigen;


class CubicBSplineCurve 
{

public:
	typedef std::pair<int, double> Parameter;

	CubicBSplineCurve( double interal = 0.001 )
		: interal_(interal)
	{

	}

	~CubicBSplineCurve() { 
		clear(); 
	}

	unsigned int nb_control()  const { return controls_.size(); }

	//////////////////////////////////////////////////////////////////////////
	// compute the x ,y position of current parameter
	//////////////////////////////////////////////////////////////////////////
	CVector2 getPos(const Parameter& para) const;

	//////////////////////////////////////////////////////////////////////////
	// compute the first differential
	//////////////////////////////////////////////////////////////////////////
	CVector2 getFirstDiff( const Parameter& para) const ;

	//////////////////////////////////////////////////////////////////////////
	// compute the second differential
	//////////////////////////////////////////////////////////////////////////
	CVector2 getSecondDiff( const Parameter& para) const ;

	//////////////////////////////////////////////////////////////////////////
	// compute the curvature
	//////////////////////////////////////////////////////////////////////////
	double getCurvature( const Parameter& para) const ;


	//////////////////////////////////////////////////////////////////////////
	// compute the unit tangent vector
	//////////////////////////////////////////////////////////////////////////
	CVector2 getTangent( const Parameter &para ) const ;


	//////////////////////////////////////////////////////////////////////////
	// compute the unit Normal vector
	//////////////////////////////////////////////////////////////////////////
	CVector2 getNormal( const Parameter &para) const;

	//////////////////////////////////////////////////////////////////////////
	// compute the Curvature center ( rho = k)
	//////////////////////////////////////////////////////////////////////////
	CVector2 getCurvCenter( const Parameter &para) const;

	///////////////////////////////////////////////////////////////////////////
	// compute the foot print
	//////////////////////////////////////////////////////////////////////////
	double findFootPrint( const vector<CVector2>& givepoints, 
		vector<Parameter>& footPrints) const ;

	//////////////////////////////////////////////////////////////////////////
	// find the coff vector
	//////////////////////////////////////////////////////////////////////////
	VectorXd getCoffe( const Parameter& para) const ;

	//////////////////////////////////////////////////////////////////////////
	// set the control points and compute a uniform spatial partition of the data points
	//////////////////////////////////////////////////////////////////////////
	void setNewControl( const vector<CVector2>& controlPs);

	//////////////////////////////////////////////////////////////////////////
	// check if two point is on same side. para is foot print of p1
	//////////////////////////////////////////////////////////////////////////
	bool checkSameSide( CVector2 p1,  CVector2 p2, CVector2 neip);

	MatrixXd getSIntegralSq( );

	MatrixXd getFIntegralSq( );


private:
	void clear()
	{
		controls_.clear();
		positions_.clear();
	}

	Parameter  getPara( int index ) const ;

	//////////////////////////////////////////////////////////////////////////
	//winding number test for a point in a polygon
	// softSurfer (www.softsurfer.com)
	//////////////////////////////////////////////////////////////////////////
	bool checkInside( CVector2 p);

	//////////////////////////////////////////////////////////////////////////
	// tests if a point is Left|On|Right of an infinite line.
	//////////////////////////////////////////////////////////////////////////
	int isLeft( CVector2 p0, CVector2 p1, CVector2 p2);


private:
	double interal_;
	std::vector<CVector2> controls_;
	std::vector<CVector2> positions_;

};

